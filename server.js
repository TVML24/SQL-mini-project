const express = require('express');
const mysql = require('mysql2');

const PORT = process.env.PORT || 3001;
const app = express();

// this also converts the rebody to json so that it can be called upon 
// if extended: false it will use the querystring libary , if extended: true it will use the qs library?
// the qs library is capable of using nested objects, while the querystring library will simply throw them in an array
app.use(express.urlencoded({ extended: false }));
// this converts the req.body object to json so that it can be called in variables
app.use(express.json());

const db = mysql.createConnection(
    {
        host: 'localhost',
        user: 'root',
// remember to add password if you want to use
        password: '',
        database: 'movies_db'
    },
    console.log('Connected to movies_db database')
);

// this sets up the route for THIS post request
// it passes the body and the response before calling an anonymous function wwith that response
app.post('/api/new-movie', ({ body }, res) => {
// this is the text of the sql request that will actually insert the new movie into the database
// the ? is a placeholder and will be replaced by the correct text when the code runs
    const sql = `INSERT INTO movies (movie_name)
    VALUES (?)`;
// this creates the variable params from the response object's body.movie_name
    const params = [body.movie_name];
// The sql variable and the params are then passed to another anonymous function inside the ACTUAL query
    db.query(sql, params, (err, result) => {
// if there is an error the code will return an error message in the response object and tell the browser (?) it is a 400 (bad request)
        if (err) {
            res.status(400).json({ error: err.message });
            return;
        }
// otherwise it will send the message success and the data will be made up of the response body object
        res.json({
            message: 'Success',
            data: body
        });
    });
});

// this request is a get and creates a view that will return the names of all the movies
app.get('/api/movies', (req, res) => {
// this is the sql query that will be input
    const sql = `SELECT id, movie_name AS title FROM movies`;
// this is the query being pushed by express to sql using the db.query method
// our query string from the const sql makes up the first param being passed
    db.query(sql, (err, rows) => {
        if (err) {
// this says to set network error status as 500 if there is an error and send an error message in json format
            res.status(500).json({ error: err.message });
            return;
        }
        res.json({
// this says to send the json message succes and have the data organised in rows?
            message: 'success',
            data: rows
        });
    });
});

// this request deletes a movie from the database, using an id passed to it in the router code
app.delete('/api/movie:id', (req, res) => {
// this is the functional sql shell query and it includes ? as a placeholder
    const sql = `DELETE FROM movies WHERE id = ?`;
// this makes params an object with the value of the id given from the request object
    const params = [req.params.id];

    db.query(sql, params, (err, result) => {
        if (err) {
            res.status(400).json({ error: res.message});
// affectedRows is apparently a automatically generated by the db.query method in the response
        } else if (!result.affectedRows) {
            res.json({
                message: 'movie not found'
            });
        } else {
            res.json({
                message: 'deleted',
                changes: result.affectedRows,
                id: req.params.id
            });
        }
    });
});

app.get('/api/movie-reviews', (req, res) => {
    const sql = `SELECT movies.movie_name AS movie, reviews.review FROM reviews LEFT JOIN movies ON reviews.movie_id = movies.id ORDER BY movies.movie_name;`;
    db.query(sql, (err, rows) => {
        if (err) {
            req.status(500).json({ error: err.message });
            return;
        }
        res.json({
            message: 'success',
            data: rows
        });
    });
});

app.put('/api/review/:id', (req, res) => {
    const sql = `UPDATE reviews SET review = ? WHERE id = ?`;
    const params = [req.body.review, req.params.id];

    db.query(sql, params, (err, result) => {
        if (err) {
            res.status(400).json({ error: err.message });
        } else if (!result.affectedRows) {
            res.json({
                message: 'movie not found'
            });
        } else {
            res.json({
                message: 'success',
                data: req.body,
                changes: result.affectedRows
            });
        }
    });
});

app.use((req, res) => {
    res.status(404).end();
});

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
